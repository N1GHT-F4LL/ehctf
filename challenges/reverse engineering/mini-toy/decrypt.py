encrypted_payload = [
0x8f, 0x80, 0xe7, 0x6c, 0x6c, 0x63, 0x0f, 0xed, 0x80, 0x42, 0xa8, 0x01, 0xe7, 
0x3c, 0x53, 0xe4, 0x36, 0x69, 0xf8, 0x3a, 0x71, 0xe7, 0x1e, 0x4b, 0x60, 0xd3, 
0x2f, 0x55, 0x59, 0x9a, 0xc0, 0x50, 0x02, 0x13, 0x66, 0x49, 0x53, 0xa9, 0xaa, 
0x61, 0x6d, 0xa4, 0x8d, 0x96, 0x37, 0x24, 0xe3, 0x37, 0x7c, 0xe7, 0x29, 0x53, 
0xef, 0x29, 0x62, 0x10, 0x86, 0x24, 0x6d, 0xb2, 0x3e, 0xef, 0x3c, 0x53, 0x69, 
0xb6, 0xe7, 0x25, 0x7b, 0x8c, 0x5e, 0x2c, 0xf8, 0x5c, 0xee, 0x6d, 0xba, 0x52, 
0x90, 0xc8, 0xa4, 0xbc, 0x65, 0x64, 0xab, 0x54, 0x83, 0x1a, 0x92, 0x66, 0x0e, 
0x90, 0x5e, 0x11, 0x48, 0x16, 0x8b, 0x3c, 0xee, 0x2b, 0x4c, 0x64, 0xbf, 0x0a, 
0xe8, 0x63, 0x2f, 0xee, 0x2b, 0x74, 0x64, 0xbf, 0xe7, 0x67, 0xe4, 0x65, 0xb5, 
0xfa, 0x2c, 0x41, 0x48, 0x37, 0x38, 0x0e, 0x3d, 0x3f, 0x22, 0x97, 0x85, 0x33, 
0x33, 0x39, 0xe4, 0x76, 0x8e, 0xfe, 0x35, 0x0f, 0x6d, 0xe1, 0xe6, 0xdd, 0x64, 
0x65, 0x73, 0x38, 0x0d, 0x5d, 0xe7, 0x0c, 0xe8, 0x9b, 0xb0, 0xc8, 0x98, 0xd0, 
0xce, 0x3a, 0x0b, 0xc9, 0xf1, 0xd8, 0xee, 0x97, 0xb0, 0x50, 0x6a, 0x1f, 0x65, 
0xe4, 0x9e, 0x93, 0x1d, 0x60, 0xd7, 0x2b, 0x70, 0x1d, 0x0b, 0x0f, 0x73, 0x3b, 
0x9a, 0xb9, 0x1f, 0x0b, 0x1a, 0x10, 0x01, 0x1c, 0x1f, 0x0b, 0x4c, 0x43, 0x10, 
0x4f, 0x4b, 0x11, 0x53, 0x58, 0x65, 0x29, 0x24, 0x20, 0x14, 0x23, 0x55, 0x43, 
0x0c, 0x3a, 0x2a, 0x5d, 0x0d, 0x0b, 0x55, 0x2b, 0x34, 0x37, 0x00, 0x02, 0x0f, 
0x11, 0x16, 0x14, 0x11, 0x40, 0x0c, 0x3a, 0x3f, 0x04, 0x50, 0x03, 0x08, 0x26, 
0x43, 0x0c, 0x56, 0x33, 0x04, 0x52, 0x0b, 0x55, 0x0b, 0x14, 0x15
    
]

key = b"shellcode"

# Convert the encrypted_payload back to bytes for XOR decryption
encrypted_bytes = bytes(encrypted_payload)

# Decrypt the payload using XOR with the given key
decrypted_payload = bytes([encrypted_bytes[i] ^ key[i % len(key)] for i in range(len(encrypted_bytes))])

# Assuming the flag is at the end of the shellcode, find the start index of the flag
# You need to know or estimate its length, or find a unique marker
flag_start_index = decrypted_payload.find(b"EHC{")
flag_end_index = decrypted_payload.find(b"}", flag_start_index) + 1  # Include the closing brace

# Extract and print the flag
flag = decrypted_payload[flag_start_index:flag_end_index]
print("Decrypted flag:", flag.decode())


